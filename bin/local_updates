#!/usr/bin/env perl

use strict;
use warnings;
use lib 'lib';

use Jifty;
BEGIN { Jifty->new; }

use AnyEvent;

# User task, synchronous
Jifty->rpc->register(
    name => "retest",
    run  => sub {
        my $arg = shift;
        my ($sha,$configname) = $arg =~ /^([0-9a-fA-F]+)(?:\s*\[(.*)\])?/;

        my $commits = Smokingit::Model::CommitCollection->new;
        $commits->limit( column => "sha", operator => "like", value => "$sha%" );
        return "Unknown SHA\n"   if $commits->count == 0;
        return "Ambiguous SHA\n" if $commits->count > 1;

        my @msgs;
        my $msg = sub { warn @_; push @msgs, @_ };

        my $commit = $commits->next;

        my $branch;

        my $configs = $commit->project->configurations;
        $configs->limit( column => "name", operator => "MATCHES", value => $configname )
            if defined $configname and length $configname;
        my $tests = 0;
        while (my $config = $configs->next) {
            my $summary = $commit->short_sha . "[" . $config->name ."]";
            my %lookup = (
                project_id       => $commit->project->id,
                configuration_id => $config->id,
                commit_id        => $commit->id,
            );
            my $smoke = Smokingit::Model::SmokeResult->new;
            $smoke->load_by_cols( %lookup );
            if ($smoke->id) {
                $msg->("Re-testing $summary\n");
                $smoke->as_superuser->set_submitted_at(undef);
                $smoke->as_superuser->set_queue_status(undef);
                $tests += $smoke->run_smoke;
            } else {
                # Guess which branch
                unless ($branch) {
                    $branch = Smokingit::Model::Branch->new;
                    my @branches = $commit->branches;
                    $branch->load_by_cols( name => $branches[0], project_id => $commit->project->id)
                        if @branches == 1;
                }
                if ($branch->id) {
                    $msg->("Testing $summary\n");
                    $tests += $commit->run_smoke( $config, $branch );
                } else {
                    $msg->("No existing smoke for $summary found, and can't determine branch\n");
                }
            }
        }
        return join "", @msgs;
    },
);

# User or background task
Jifty->rpc->register(
    name => "sync_project",
    run  => sub {
        my $project_name = shift;

        my $project = Smokingit::Model::Project->new(
            current_user => Smokingit::CurrentUser->superuser,
        );
        $project->load_by_cols( name => $project_name );
        return "No such project: $project_name\n"
            unless $project->id;

        my @results = $project->sync;
        return @results ? join("\n",@results,"") : "No changes\n";
    },
);

# Background task, from worker
Jifty->rpc->register(
    name => "post_results",
    run  => sub {
        my $data = shift;
        my $smoke = Smokingit::Model::SmokeResult->new(
            current_user => Smokingit::CurrentUser->superuser,
        );
        my ($ok, $msg) = $smoke->post_result($data);
        warn "$msg\n";
        return $ok;
    },
);

# Background task
Jifty->rpc->register(
    name => "plan_tests",
    run  => sub {
        my $project_name = shift;

        my $projects = Smokingit::Model::ProjectCollection->new(
            current_user => Smokingit::CurrentUser->superuser,
        );
        if ($project_name) {
            $projects->limit( column => "name", value => $project_name );
        } else {
            $projects->unlimit;
        }
        return 0 unless $projects->count;

        my $tests = 0;
        while (my $project = $projects->next) {
            Jifty->handle->begin_transaction;
            $tests += $project->schedule_tests;
            Jifty->handle->commit;
        }

        return $tests;
    }
);

my $listen = Jifty->bus->new_listener;
$listen->subscribe( Jifty->bus->topic("worker_progress") );
$listen->poll(
    sub {
        my %message = %{ shift() };
        my $smoke = Smokingit::Model::SmokeResult->new(
            current_user => Smokingit::CurrentUser->superuser,
        );
        $smoke->load( $message{smoke_id} );
        my $status = $message{status};
        if ($status eq "started") {
            $smoke->set_queue_status("Processing commit");
        } elsif ($status eq "configuring") {
            $smoke->set_queue_status("Configuring");
        } elsif ($status eq "testing") {
            my $fraction = $message{complete}/($message{total} || 1);
            $smoke->set_queue_status(
                int($fraction*100) ."% complete");
        } else {
            warn "Unknown worker status: $status";
        }
    }
);

# Schedule some basic maintenance
my $projects = Smokingit::Model::ProjectCollection->new;
$projects->unlimit;
Jifty->rpc->call( name => "sync_project", args => $_->name )
    while $_ = $projects->next;

AE::cv->recv;
