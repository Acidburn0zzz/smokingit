#!/usr/bin/env perl

use strict;
use warnings;
use lib 'lib';

use Jifty;
BEGIN { Jifty->new( no_request => 1 ); }

use AnyEvent;

# User task, synchronous
Jifty->rpc->register(
    name => "retest",
    run  => sub {
        return Smokingit->test( @_ ) . "\n";
    },
);

# User or background task
Jifty->rpc->register(
    name => "sync_project",
    run  => sub {
        my $project_name = shift;

        my $project = Smokingit::Model::Project->new(
            current_user => Smokingit::CurrentUser->superuser,
        );
        $project->load_by_cols( name => $project_name );
        return "No such project: $project_name\n"
            unless $project->id;

        my @results = $project->sync;
        return @results ? join("\n",@results,"") : "No changes\n";
    },
);

# Background task, from worker
Jifty->rpc->register(
    name => "post_file_results",
    run  => sub {
        my $data = shift;
        return unless keys %{$data};
        my $smoke = Smokingit::Model::SmokeResult->new(
            current_user => Smokingit::CurrentUser->superuser,
        );
        my ($ok, $msg) = $smoke->post_file_result($data);
        return $ok;
    },
);
Jifty->rpc->register(
    name => "post_results",
    run  => sub {
        my $data = shift;
        return unless keys %{$data};
        my $smoke = Smokingit::Model::SmokeResult->new(
            current_user => Smokingit::CurrentUser->superuser,
        );
        my ($ok, $msg) = $smoke->post_result($data);
        warn "$msg\n";
        return $ok;
    },
);

# Background task
Jifty->rpc->register(
    name => "plan_tests",
    run  => sub {
        my $project_name = shift;

        my $projects = Smokingit::Model::ProjectCollection->new(
            current_user => Smokingit::CurrentUser->superuser,
        );
        if ($project_name) {
            $projects->limit( column => "name", value => $project_name );
        } else {
            $projects->unlimit;
        }
        return 0 unless $projects->count;

        my $tests = 0;
        while (my $project = $projects->next) {
            Jifty->handle->begin_transaction;
            $tests += $project->schedule_tests;
            Jifty->handle->commit;
        }

        return $tests;
    }
);

my $listen = Jifty->bus->new_listener;
$listen->subscribe( Jifty->bus->topic("worker_progress") );
$listen->poll(
    sub {
        my %message = %{ shift() };
        my $smoke = Smokingit::Model::SmokeResult->new(
            current_user => Smokingit::CurrentUser->superuser,
        );
        Jifty->handle->begin_transaction;
        $smoke->load( $message{smoke_id} );
        my $status = Smokingit::Status->new( $smoke );
        if ($message{status} eq "started") {
            $smoke->set_queue_status("Processing commit");
        } elsif ($message{status} eq "configuring") {
            $smoke->set_queue_status("Configuring");
        } elsif ($message{status} eq "testing") {
            if ($smoke->queue_status) {
                my $fraction = $message{complete}/($message{total} || 1);
                $smoke->set_queue_status(
                    int($fraction*100) ."% complete");
            }
        } else {
            warn "Unknown worker status: $message{status}";
        }
        Jifty->handle->commit;

        $status->publish;
    }
);

# Schedule some basic maintenance
my $projects = Smokingit::Model::ProjectCollection->new;
$projects->unlimit;
while (my $project = $projects->next) {
    Jifty->rpc->call( name => "sync_project", args => $project->name )
}

AE::cv->recv;
